#!/usr/bin/env python
# -*- coding: UTF-8 -*-
##############################################################################
#
# PDFgui            by DANSE Diffraction group
#                   Simon J. L. Billinge
#                   (c) 2006 trustees of the Michigan State University.
#                   All rights reserved.
#
# File coded by:    Dmitriy Bryndin
#
# See AUTHORS.txt for a list of people who contributed.
# See LICENSE.txt for license information.
#
##############################################################################

# generated by wxGlade 0.4.1 on Tue Apr 18 22:38:01 2006

#
# "Bug report" Dialog
#
import wx
import wx.lib.hyperlink
import webbrowser
import re


# don't use trac ticket submission
queryPDFguiTickets = "https://github.com/diffpy/diffpy.pdfgui/issues"
USERSMAILINGLIST = "https://groups.google.com/forum/#!forum/diffpy-users"
DEVMAILINGLIST = "https://groups.google.com/forum/#!forum/diffpy-dev"
_authdata = '99.77.79.61.111.82.67.112'

class ErrorReportDialog(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: ErrorReportDialog.__init__
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE | wx.MAXIMIZE_BOX | wx.MINIMIZE_BOX | wx.RESIZE_BORDER
        wx.Dialog.__init__(self, *args, **kwds)
        self.label_header = wx.StaticText(self, wx.ID_ANY, "PDFgui has encountered a problem. We are sorry for the inconvenience.")
        self.text_ctrl_text = wx.TextCtrl(self, wx.ID_ANY, "To help us improve this software, you can click the Copy Error Report button, and paste the Error Log into GitHub issues.", style=wx.BORDER_NONE | wx.TE_MULTILINE | wx.TE_READONLY)
        self.label_view_ticket = wx.StaticText(self, wx.ID_ANY, "You can view current bug reports and feature requests at GitHub issues:")
        self.ticketlink = wx.lib.hyperlink.HyperLinkCtrl(self, wx.ID_ANY, "https://github.com/diffpy/diffpy.pdfgui/issues")
        self.label_view_community_user = wx.StaticText(self, wx.ID_ANY, "Discuss PDFgui and learn about new developments and features at diffpy-users Google Group:")
        self.community_user_link = wx.lib.hyperlink.HyperLinkCtrl(self, wx.ID_ANY, "https://groups.google.com/forum/#!forum/diffpy-users")
        self.label_view_community_dev = wx.StaticText(self, wx.ID_ANY, "You can also report a bug and request features at diffpy-dev Google Group:")
        self.community_dev_link = wx.lib.hyperlink.HyperLinkCtrl(self, wx.ID_ANY, "https://groups.google.com/forum/#!forum/diffpy-dev")
        self.label_log = wx.StaticText(self, wx.ID_ANY, "Error log:")
        self.text_ctrl_log = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_MULTILINE | wx.TE_READONLY)
        self.static_line_1 = wx.StaticLine(self, wx.ID_ANY)
        self.button_google = wx.Button(self, wx.ID_ANY, "Google This Error")
        self.button_copyErrorLog = wx.Button(self, wx.ID_ANY, "Copy Error Log")
        self.button_close = wx.Button(self, wx.ID_CANCEL, "Close")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.onGoogle, self.button_google)
        self.Bind(wx.EVT_BUTTON, self.onCopyErrorLog, self.button_copyErrorLog)
        # end wxGlade
        self.__customProperties()
        return

    def __set_properties(self):
        # begin wxGlade: ErrorReportDialog.__set_properties
        self.SetTitle("Problem Report for PDFgui")
        self.SetSize((946, 687))
        self.text_ctrl_text.SetBackgroundColour(wx.Colour(236, 236, 236))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: ErrorReportDialog.__do_layout
        sizer_main = wx.BoxSizer(wx.VERTICAL)
        sizer_buttons = wx.BoxSizer(wx.HORIZONTAL)
        sizer_community_dev = wx.BoxSizer(wx.HORIZONTAL)
        sizer_community_user = wx.BoxSizer(wx.HORIZONTAL)
        sizer_ticket = wx.BoxSizer(wx.HORIZONTAL)
        sizer_main.Add(self.label_header, 0, wx.ALL | wx.EXPAND, 5)
        sizer_main.Add(self.text_ctrl_text, 0, wx.EXPAND, 5)
        sizer_ticket.Add(self.label_view_ticket, 0, wx.ALL | wx.EXPAND, 5)
        sizer_ticket.Add(self.ticketlink, 1, wx.BOTTOM | wx.TOP, 5)
        sizer_main.Add(sizer_ticket, 0, wx.BOTTOM | wx.TOP, 5)
        sizer_community_user.Add(self.label_view_community_user, 0, wx.ALL | wx.EXPAND, 5)
        sizer_community_user.Add(self.community_user_link, 1, wx.BOTTOM | wx.TOP, 5)
        sizer_main.Add(sizer_community_user, 0, wx.BOTTOM | wx.TOP, 5)
        sizer_community_dev.Add(self.label_view_community_dev, 0, wx.ALL | wx.EXPAND, 5)
        sizer_community_dev.Add(self.community_dev_link, 1, wx.BOTTOM | wx.TOP, 5)
        sizer_main.Add(sizer_community_dev, 0, wx.BOTTOM | wx.TOP, 5)
        sizer_main.Add(self.label_log, 0, wx.EXPAND | wx.LEFT | wx.RIGHT | wx.TOP, 5)
        sizer_main.Add(self.text_ctrl_log, 1, wx.BOTTOM | wx.EXPAND | wx.LEFT | wx.RIGHT, 5)
        sizer_main.Add(self.static_line_1, 0, wx.EXPAND | wx.LEFT | wx.RIGHT | wx.TOP, 5)
        sizer_buttons.Add((20, 20), 1, 0, 0)
        sizer_buttons.Add(self.button_google, 0, wx.ALL, 5)
        sizer_buttons.Add(self.button_copyErrorLog, 0, wx.ALL, 5)
        sizer_buttons.Add(self.button_close, 0, wx.ALL, 5)
        sizer_main.Add(sizer_buttons, 0, wx.EXPAND, 0)
        self.SetSizer(sizer_main)
        self.Layout()
        # end wxGlade

    def __customProperties(self):
        """Set custom properties."""
        # Events
        self.errorReport = True

        self.ticketlink.SetURL(queryPDFguiTickets)
        self.ticketlink.SetToolTip(wx.ToolTip(queryPDFguiTickets))
        self.community_user_link.SetURL(USERSMAILINGLIST)
        self.community_user_link.SetToolTip(wx.ToolTip(USERSMAILINGLIST))
        self.community_dev_link.SetURL(DEVMAILINGLIST)
        self.community_dev_link.SetToolTip(wx.ToolTip(DEVMAILINGLIST))
        return

    def ShowModal(self):
        # there are 2 modes: error report and feature request
        if self.text_ctrl_log.GetValue().strip() == "":
            self.SetTitle("Feature Request / Bug Report")
            self.label_header.SetLabel("Share you thoughts about PDFgui!")
            self.text_ctrl_text.SetValue("To help us improve this software, you can submit feature request / bug report via following links.")
            self.label_log.SetLabel("")
            self.text_ctrl_log.Hide()
            self.button_google.Hide()
            self.button_copyErrorLog.Hide()
            self.SetSize((946, 250))
            self.errorReport = False
        else:
            self.SetTitle("Problem Report for PDFgui")
            self.label_header.SetLabel("PDFgui has encountered a problem. We are sorry for the inconvenience.")
            self.text_ctrl_text.SetValue("To help us improve this software, you can click the Copy Error Log button, and paste the Error Log into GitHub issues.")
            self.label_log.SetLabel("Error log:")
            self.text_ctrl_log.Show()
            self.errorReport = True

        wx.Dialog.ShowModal(self)

    def onSummaryText(self, event): # wxGlade: ErrorReportDialog.<event_handler>
        """Enable sending only if short summary is filled out."""
        self.button_send.Enable(True)
        value = self.text_ctrl_summary.GetValue()
        if not value.strip():
            self.button_send.Enable(False)
        event.Skip()

    def onGoogle(self, event):  # wxGlade: ErrorReportDialog.<event_handler>
        # google the `str_to_search`, path-independent items, in the traceback when click button "google this error"
        traceback = self.text_ctrl_log.GetValue()
        str_to_search = ""
        # find 'errorwrapper.py", line 60, in _f' patterns in error log using regular expression
        pattern = re.compile('\w+\.py\"\,\sline\s\d+\,\sin\s\S+')
        findpattern = re.findall(pattern, traceback)
        if len(findpattern) != 0: # if found
            str_to_search = ' '.join(findpattern)
            # replace '", line 60, in ' in the patterns found with ' ' using regular expression
            str_to_search = re.sub('\"\,\sline\s\d+\,\sin\s',' ',str_to_search)
            str_to_search += " "
        # add the Error line in error log into querydata
        for line in traceback.split("\n"):
            if "Error:" in line:
                str_to_search += line.strip() + " "
        if str_to_search != "":
            webbrowser.open("https://www.google.com/search?q=" + str_to_search)
        else: # if no error information is extracted successfully above, just google the whole traceback.
            webbrowser.open("https://www.google.com/search?q=" + traceback)
        event.Skip()
        return

    def onCopyErrorLog(self, event):  # wxGlade: ErrorReportDialog.<event_handler>
        # copy the traceback enclosed in GitHub block quotations so it is easier to paste into GitHub issue.
        traceback = self.text_ctrl_log.GetValue()
        clipdata = wx.TextDataObject()
        clipdata.SetText("```" + "\n" + traceback + "\n" + "```")
        wx.TheClipboard.Open()
        wx.TheClipboard.SetData(clipdata)
        wx.TheClipboard.Close()
        event.Skip()
        return
# end of class ErrorReportDialog


##### testing code ############################################################
class MyApp(wx.App):
    def OnInit(self):
        self.dialog = ErrorReportDialog(None, -1, "")
        self.SetTopWindow(self.dialog)
        self.test()
        self.dialog.ShowModal()
        self.dialog.Destroy()
        return 1

    def test(self):
        '''Testing code goes here.'''
        errortext = """\
Traceback (most recent call last): 
  File "C:\DiffPy\Python25\lib\site-packages\diffpy.pdfgui-1.0_r3067_20090410-py2.5.egg\diffpy\pdfgui\gui\errorwrapper.py", line 60, in _f 
    return func(*args, **kwargs) 
  File "C:\DiffPy\Python25\lib\site-packages\diffpy.pdfgui-1.0_r3067_20090410-py2.5.egg\diffpy\pdfgui\gui\mainframe.py", line 2176, in onSave 
    self.control.save(self.fullpath) 
  File "C:\DiffPy\Python25\lib\site-packages\diffpy.pdfgui-1.0_r3067_20090410-py2.5.egg\diffpy\pdfgui\control\pdfguicontrol.py", line 507, in save 
    self.projfile = projfile.encode('ascii') 
UnicodeDecodeError: 'ascii' codec can't decode byte 0xb0 in position 115: ordinal not in range(128) 
"""
        self.dialog.text_ctrl_log.SetValue(errortext)
# end of class MyApp

if __name__ == "__main__":
    app = MyApp(0)
    app.MainLoop()

##### end of testing code #####################################################
