#!/usr/bin/env python
########################################################################
#
# PDFgui            by DANSE Diffraction group
#                   Simon J. L. Billinge
#                   (c) 2006 trustees of the Michigan State University.
#                   All rights reserved.
#
# File coded by:    Chris Farrow
#
# See AUTHORS.txt for a list of people who contributed.
# See LICENSE.txt for license information.
#
########################################################################

# -*- coding: UTF-8 -*-
# generated by wxGlade 0.4 on Wed Feb 22 21:02:37 2006

import wx
from wxExtensions.validators import TextValidator, FLOAT_ONLY
from pdfpanel import PDFPanel

class DataSetConfigurePanel(wx.Panel, PDFPanel):
    def __init__(self, *args, **kwds):
        PDFPanel.__init__(self)
        # begin wxGlade: DataSetConfigurePanel.__init__
        kwds["style"] = wx.TAB_TRAVERSAL
        wx.Panel.__init__(self, *args, **kwds)
        self.sizer_panelname_staticbox = wx.StaticBox(self, -1, "")
        self.panelNameLabel = wx.StaticText(self, -1, "Data Set Configuration")
        self.radioBoxStype = wx.RadioBox(self, -1, "Scatterer Type", choices=["Neutron", "X-ray"], majorDimension=2, style=wx.RA_SPECIFY_COLS)
        self.labelDataRange = wx.StaticText(self, -1, "Data Range")
        self.textCtrlDataFrom = wx.TextCtrl(self, -1, "", style=wx.TE_READONLY)
        self.labelDataTo = wx.StaticText(self, -1, "to")
        self.textCtrlDataTo = wx.TextCtrl(self, -1, "", style=wx.TE_READONLY)
        self.labelFitRange = wx.StaticText(self, -1, "Fit Range", style=wx.ALIGN_RIGHT)
        self.textCtrlFitFrom = wx.TextCtrl(self, -1, "1.0")
        self.labelFitTo = wx.StaticText(self, -1, "to", style=wx.ALIGN_RIGHT)
        self.textCtrlFitTo = wx.TextCtrl(self, -1, "10.0")
        self.labelScaleFactor = wx.StaticText(self, -1, "Scale Factor", style=wx.ALIGN_RIGHT)
        self.textCtrlScaleFactor = wx.TextCtrl(self, -1, "1.0")
        self.labelQmax = wx.StaticText(self, -1, "Qmax", style=wx.ALIGN_RIGHT)
        self.textCtrlQmax = wx.TextCtrl(self, -1, "25.0")
        self.labelQsigma = wx.StaticText(self, -1, "Qsigma", style=wx.ALIGN_RIGHT)
        self.textCtrlQsigma = wx.TextCtrl(self, -1, "0.0")
        self.labelQalpha = wx.StaticText(self, -1, "Qalpha", style=wx.ALIGN_RIGHT)
        self.textCtrlQalpha = wx.TextCtrl(self, -1, "0.0")
        self.labelTemperature = wx.StaticText(self, -1, "Temperature", style=wx.ALIGN_RIGHT)
        self.textCtrlTemperature = wx.TextCtrl(self, -1, "300.0")
        self.labelDoping = wx.StaticText(self, -1, "Doping", style=wx.ALIGN_RIGHT)
        self.textCtrlDoping = wx.TextCtrl(self, -1, "1.0")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_RADIOBOX, self.onStype, self.radioBoxStype)
        # end wxGlade
        self.__customProperties()

    def __set_properties(self):
        # begin wxGlade: DataSetConfigurePanel.__set_properties
        self.panelNameLabel.SetFont(wx.Font(18, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.radioBoxStype.SetMinSize((330, 43))
        self.radioBoxStype.SetSelection(0)
        self.textCtrlDataFrom.SetBackgroundColour(wx.SystemSettings_GetColour(wx.SYS_COLOUR_GRAYTEXT))
        self.textCtrlDataTo.SetBackgroundColour(wx.SystemSettings_GetColour(wx.SYS_COLOUR_GRAYTEXT))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: DataSetConfigurePanel.__do_layout
        sizer_1 = wx.BoxSizer(wx.HORIZONTAL)
        outerSizer = wx.BoxSizer(wx.VERTICAL)
        grid_sizer_1 = wx.FlexGridSizer(6, 4, 5, 10)
        sizer_panelname = wx.StaticBoxSizer(self.sizer_panelname_staticbox, wx.HORIZONTAL)
        sizer_panelname.Add(self.panelNameLabel, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 5)
        outerSizer.Add(sizer_panelname, 0, wx.ALL|wx.EXPAND, 5)
        outerSizer.Add((450, 5), 0, wx.ADJUST_MINSIZE, 0)
        outerSizer.Add(self.radioBoxStype, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 5)
        grid_sizer_1.Add(self.labelDataRange, 0, wx.LEFT|wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 5)
        grid_sizer_1.Add(self.textCtrlDataFrom, 0, wx.ADJUST_MINSIZE, 0)
        grid_sizer_1.Add(self.labelDataTo, 0, wx.LEFT|wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 20)
        grid_sizer_1.Add(self.textCtrlDataTo, 0, wx.ADJUST_MINSIZE, 0)
        grid_sizer_1.Add(self.labelFitRange, 0, wx.LEFT|wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 5)
        grid_sizer_1.Add(self.textCtrlFitFrom, 0, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        grid_sizer_1.Add(self.labelFitTo, 0, wx.LEFT|wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 20)
        grid_sizer_1.Add(self.textCtrlFitTo, 0, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        grid_sizer_1.Add(self.labelScaleFactor, 0, wx.LEFT|wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 5)
        grid_sizer_1.Add(self.textCtrlScaleFactor, 0, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        grid_sizer_1.Add(self.labelQmax, 0, wx.LEFT|wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 20)
        grid_sizer_1.Add(self.textCtrlQmax, 0, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        grid_sizer_1.Add(self.labelQsigma, 0, wx.LEFT|wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 5)
        grid_sizer_1.Add(self.textCtrlQsigma, 0, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        grid_sizer_1.Add(self.labelQalpha, 0, wx.LEFT|wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 20)
        grid_sizer_1.Add(self.textCtrlQalpha, 0, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        grid_sizer_1.Add(self.labelTemperature, 0, wx.LEFT|wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 5)
        grid_sizer_1.Add(self.textCtrlTemperature, 0, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        grid_sizer_1.Add(self.labelDoping, 0, wx.LEFT|wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 20)
        grid_sizer_1.Add(self.textCtrlDoping, 0, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        outerSizer.Add(grid_sizer_1, 0, wx.ALL|wx.EXPAND, 5)
        sizer_1.Add(outerSizer, 1, wx.EXPAND, 0)
        self.SetAutoLayout(True)
        self.SetSizer(sizer_1)
        sizer_1.Fit(self)
        sizer_1.SetSizeHints(self)
        # end wxGlade

    # USER CONFIGURATION CODE #################################################

    def __customProperties(self):
        # Set some reasonable defaults
        self.configuration = None
        self.constraints = {}
        self.stypeMap = {0: 'N', 1: 'X'}
        self.metaNames = ['doping', 'temperature']

        self.ctrlMap = {'fitrmin'       :   'textCtrlFitFrom',
                        'fitrmax'       :   'textCtrlFitTo',
                        'rmin'          :   'textCtrlDataFrom',
                        'rmax'          :   'textCtrlDataTo',
                        'dscale'        :   'textCtrlScaleFactor',
                        'qmax'          :   'textCtrlQmax',
                        'qsig'          :   'textCtrlQsigma',
                        'qalp'          :   'textCtrlQalpha',
                        'temperature'   :   'textCtrlTemperature',
                        'doping'        :   'textCtrlDoping',
                        }

        self.toolTips = {
                        'dscale'        :   'Data scaling factor',
                        'qsig'          :   'Resolution dampening factor',
                        'qalp'          :   'Peak broadening factor',
                        }

        # Give each textCtrl a name that can be referenced and setup the
        # validator
        for (key, value) in self.ctrlMap.items():
            textCtrl = getattr(self, value)
            textCtrl.SetName(key)
            textCtrl.SetValidator(TextValidator(FLOAT_ONLY))

        # Setup the event code.
        for ctrlName in self.ctrlMap.values():
            textCtrl = getattr(self, ctrlName)
            textCtrl.Bind(wx.EVT_KILL_FOCUS, self.onLoseFocus)

        # For blocked text controls.
        self.message = "constrained"
        self.message = "This variable is constrained. Edit the associated parameter."
        return

    def setConfigurationData(self):
        """Set the values in the configuration panel.

        The values come from the configuration member dictionary.
        stype           --  'N' or 'X'
        dscale          --  float
        qmax            --  float
        qsig            --  float
        rmin            --  float
        rmax            --  float
        fitrmin         --  float
        fitrmax         --  float
        temperature     --  float
        doping          --  float
        """
        if not self.configuration: return

        stype = self.configuration.stype

        if stype == 'N':
            self.radioBoxStype.SetSelection(0)
        elif stype == 'X':
            self.radioBoxStype.SetSelection(1)
        else:
            self.configuration.stype = 'N'
            self.radioBoxStype.SetSelection(0)

        # iterate over all configurable items
        for (key, value) in self.ctrlMap.items():
            textCtrl = getattr(self, value)

            if key in self.metaNames:
                value = self.configuration.metadata.get(key)
            else:
                value = getattr(self.configuration, key)

            if value is not None:
                textCtrl.SetValue(str(value))
            else:
                textCtrl.SetValue('0.0')

        return

    def restrictConstrainedParameters(self):
        """Set 'read-only' boxes that correspond to constrained parameters."""
        if not self.constraints: return

        for key in ['dscale', 'qsig', 'qalp']:
            value = self.ctrlMap[key]
            textCtrl = getattr(self, value)
            if key in self.constraints:
                textCtrl.SetEditable(False)
                textCtrl.SetBackgroundColour(wx.SystemSettings_GetColour(wx.SYS_COLOUR_GRAYTEXT))
                textCtrl.SetToolTipString(self.constraints[key].formula)
            else:
                textCtrl.SetEditable(True)
                textCtrl.SetBackgroundColour(wx.NullColour)
                textCtrl.SetToolTipString(self.toolTips[key])

        return

    def __coerseText(self, value):
        """Turn the text representation of a float into a float."""
        if not value:
            value = '0'
        if value[-1].lower() in ('-', 'e'):
            value += '0'
        return float(value)

    def __adjustFitRange(self, name, value):
        """Check the fit range values.

        The fit range values are set to their defaults (the data range) when the
        fit range is nonsensical.
        """
        if name == 'fitrmin':
            if value < self.configuration.rmin or\
                    value >= self.configuration.fitrmax:
                value = self.configuration.rmin
                self.textCtrlFitFrom.SetValue(str(value))
        elif name == 'fitrmax':
            if value < self.configuration.fitrmin or\
                    value >= self.configuration.rmax:
                value = self.configuration.rmax
                self.textCtrlFitTo.SetValue(str(value))
        return value

    # EVENT CODE #############################################################

    def onStype(self, event): # wxGlade: DataSetConfigurePanel.<event_handler>
        """Record the user's selection for stype."""
        value = event.GetInt()
        self.configuration.stype = self.stypeMap[value]
        self.mainPanel.needsSave()
        return

    def onLoseFocus(self, event):
        """Record the user's selection for the text ctrl data."""
        textCtrl = event.GetEventObject()
        value = textCtrl.GetValue()
        value = self.__coerseText(value)
        name = textCtrl.GetName()
        # Check the fit range
        value = self.__adjustFitRange(name, value)
        if name in self.metaNames:
            self.configuration.metadata[name] = value
        else:
            setattr(self.configuration, name, value)
        self.mainPanel.needsSave()
        return

    # Methods overloaded from PDFPanel

    def refresh(self):
        """Refresh the panel."""
        self.setConfigurationData()
        self.restrictConstrainedParameters()
        return


# end of class DataSetConfigurePanel


__id__ = "$Id$"
