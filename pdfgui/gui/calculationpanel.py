#!/usr/bin/env python
########################################################################
#
# PDFgui            by DANSE Diffraction group
#                   Simon J. L. Billinge
#                   (c) 2006 trustees of the Michigan State University.
#                   All rights reserved.
#
# File coded by:    Chris Farrow
#
# See AUTHORS.txt for a list of people who contributed.
# See LICENSE.txt for license information.
#
########################################################################

# -*- coding: UTF-8 -*-
# generated by wxGlade 0.4.1 on Mon Apr  3 19:12:03 2006

import wx
from wxExtensions.validators import TextValidator, FLOAT_ONLY
from pdfpanel import PDFPanel

class CalculationPanel(wx.Panel, PDFPanel):
    def __init__(self, *args, **kwds):
        PDFPanel.__init__(self)
        # begin wxGlade: CalculationPanel.__init__
        kwds["style"] = wx.TAB_TRAVERSAL
        wx.Panel.__init__(self, *args, **kwds)
        self.sizer_panelname_staticbox = wx.StaticBox(self, -1, "")
        self.panelNameLabel = wx.StaticText(self, -1, "Calculation Configuration")
        self.radioBoxStype = wx.RadioBox(self, -1, "Scatterer Type", choices=["Neutron", "X-ray"], majorDimension=2, style=wx.RA_SPECIFY_COLS)
        self.labelCalcRange = wx.StaticText(self, -1, "Calculation Range", style=wx.ALIGN_RIGHT)
        self.textCtrlCalcFrom = wx.TextCtrl(self, -1, "1.0")
        self.labelTo = wx.StaticText(self, -1, "to", style=wx.ALIGN_RIGHT)
        self.textCtrlCalcTo = wx.TextCtrl(self, -1, "10.0")
        self.labelQmax = wx.StaticText(self, -1, "Qmax", style=wx.ALIGN_RIGHT)
        self.textCtrlQmax = wx.TextCtrl(self, -1, "25.0")
        self.labelQsigma = wx.StaticText(self, -1, "Qsigma", style=wx.ALIGN_RIGHT)
        self.textCtrlQsigma = wx.TextCtrl(self, -1, "0.0")
        self.labelRStep = wx.StaticText(self, -1, "R Spacing", style=wx.ALIGN_RIGHT)
        self.textCtrlRStep = wx.TextCtrl(self, -1, "0.05")
        self.exportButton = wx.Button(self, -1, "Export")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_RADIOBOX, self.onStype, self.radioBoxStype)
        self.Bind(wx.EVT_BUTTON, self.onExport, self.exportButton)
        # end wxGlade
        self.__customProperties()

    def __set_properties(self):
        # begin wxGlade: CalculationPanel.__set_properties
        self.panelNameLabel.SetFont(wx.Font(18, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.radioBoxStype.SetMinSize((330, 43))
        self.radioBoxStype.SetSelection(0)
        self.exportButton.Hide()
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: CalculationPanel.__do_layout
        sizer_1 = wx.BoxSizer(wx.HORIZONTAL)
        outerSizer = wx.BoxSizer(wx.VERTICAL)
        grid_sizer_1 = wx.FlexGridSizer(6, 4, 5, 10)
        sizer_panelname = wx.StaticBoxSizer(self.sizer_panelname_staticbox, wx.HORIZONTAL)
        sizer_panelname.Add(self.panelNameLabel, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 5)
        outerSizer.Add(sizer_panelname, 0, wx.ALL|wx.EXPAND, 5)
        outerSizer.Add((450, 5), 0, wx.ADJUST_MINSIZE, 0)
        outerSizer.Add(self.radioBoxStype, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 5)
        grid_sizer_1.Add(self.labelCalcRange, 0, wx.LEFT|wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 5)
        grid_sizer_1.Add(self.textCtrlCalcFrom, 0, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        grid_sizer_1.Add(self.labelTo, 0, wx.LEFT|wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 20)
        grid_sizer_1.Add(self.textCtrlCalcTo, 0, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        grid_sizer_1.Add(self.labelQmax, 0, wx.LEFT|wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 20)
        grid_sizer_1.Add(self.textCtrlQmax, 0, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        grid_sizer_1.Add(self.labelQsigma, 0, wx.LEFT|wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 5)
        grid_sizer_1.Add(self.textCtrlQsigma, 0, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        grid_sizer_1.Add(self.labelRStep, 0, wx.LEFT|wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 5)
        grid_sizer_1.Add(self.textCtrlRStep, 0, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        outerSizer.Add(grid_sizer_1, 0, wx.ALL|wx.EXPAND, 5)
        outerSizer.Add(self.exportButton, 0, wx.ALL|wx.ALIGN_RIGHT|wx.ADJUST_MINSIZE, 5)
        sizer_1.Add(outerSizer, 1, wx.EXPAND, 0)
        self.SetAutoLayout(True)
        self.SetSizer(sizer_1)
        sizer_1.Fit(self)
        sizer_1.SetSizeHints(self)
        # end wxGlade

    # USER CONFIGURATION CODE #################################################

    def __customProperties(self):
        """Set up the custom properites."""
        self.textCtrlCalcFrom.Bind(wx.EVT_KILL_FOCUS, self.onLoseFocus)
        self.textCtrlCalcTo.Bind(wx.EVT_KILL_FOCUS, self.onLoseFocus)
        self.textCtrlQmax.Bind(wx.EVT_KILL_FOCUS, self.onLoseFocus)
        self.textCtrlQsigma.Bind(wx.EVT_KILL_FOCUS, self.onLoseFocus)
        self.textCtrlRStep.Bind(wx.EVT_KILL_FOCUS, self.onRStep)
        self.calculation = None
        self.stypeMap = {0: 'N', 1: 'X'}

        self.ctrlMap = {'rmin'       :   'textCtrlCalcFrom',
                        'rmax'       :   'textCtrlCalcTo',
                        'qmax'       :   'textCtrlQmax',
                        'qsig'       :   'textCtrlQsigma',
                        'rstep'      :   'textCtrlRStep',
                        }

        # Give each textCtrl a name that can be referenced and setup the
        # validator
        for (key, value) in self.ctrlMap.items():
            textCtrl = getattr(self, value)
            textCtrl.SetName(key)
            textCtrl.SetValidator(TextValidator(FLOAT_ONLY))

        return

    def setConfigurationData(self):
        """Set the data in the panel."""
        if self.calculation:
            stype = self.calculation.stype

            if stype == 'N':
                self.radioBoxStype.SetSelection(0)
            elif stype == 'X':
                self.radioBoxStype.SetSelection(1)

        for (key, value) in self.ctrlMap.items():
            textCtrl = getattr(self, value)

            value = getattr(self.calculation, key)

            if value is not None:
                textCtrl.SetValue(str(value))
            else:
                textCtrl.SetValue('0.0')
        return

    def processEvent(self, name):
        textCtrl = getattr(self, self.ctrlMap[name])
        value = textCtrl.GetValue()
        value = self.__coerseText(value)
        if name != "rstep":
            setattr(self.calculation, name, value)
        else:
            self.calculation.setRGrid(rstep=value)
        self.mainPanel.needsSave()
        return

    def __coerseText(self, value):
        if not value:
            value = '0'
        if value[-1].lower() in ('-', 'e'):
            value += '0'
        return float(value)
    # EVENT CODE #############################################################

    def onStype(self, event): # wxGlade: CalculationPanel.<event_handler>
        value = event.GetInt()
        self.calculation.stype = self.stypeMap[value]
        self.mainPanel.needsSave()
        return

    def onRStep(self, event): # wxGlade: CalculationPanel.<event_handler>
        textCtrl = event.GetEventObject()
        value = textCtrl.GetValue()
        value = self.__coerseText(value)
        self.calculation.setRGrid(rstep=value)
        self.mainPanel.needsSave()
        return

    def onLoseFocus(self, event):
        textCtrl = event.GetEventObject()
        value = textCtrl.GetValue()
        value = self.__coerseText(value)
        name = textCtrl.GetName()
        setattr(self.calculation, name, value)
        self.mainPanel.needsSave()
        return


    def onExport(self, event): # wxGlade: CalculationPanel.<event_handler>
        event.Skip()

    # Methods overloaded from PDFPanel
    def refresh(self):
        """Refresh the panel."""
        self.setConfigurationData()
        return

# end of class CalculationPanel


__id__ = "$Id$"
